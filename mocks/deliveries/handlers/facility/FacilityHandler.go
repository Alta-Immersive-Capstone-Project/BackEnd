// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// FacilityHandler is an autogenerated mock type for the FacilityHandler type
type FacilityHandler struct {
	mock.Mock
}

// CreateFacility provides a mock function with given fields:
func (_m *FacilityHandler) CreateFacility() echo.HandlerFunc {
	ret := _m.Called()

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func() echo.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

// DeleteFacility provides a mock function with given fields:
func (_m *FacilityHandler) DeleteFacility() echo.HandlerFunc {
	ret := _m.Called()

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func() echo.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

// GetAllFacility provides a mock function with given fields:
func (_m *FacilityHandler) GetAllFacility() echo.HandlerFunc {
	ret := _m.Called()

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func() echo.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

// GetFacilityID provides a mock function with given fields:
func (_m *FacilityHandler) GetFacilityID() echo.HandlerFunc {
	ret := _m.Called()

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func() echo.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

<<<<<<< HEAD
=======
// GetNearFacility provides a mock function with given fields:
func (_m *FacilityHandler) GetNearFacility() echo.HandlerFunc {
	ret := _m.Called()

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func() echo.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

>>>>>>> 3d2f172cae4224571053c1b5658836fe1402c6a9
// UpdateFacility provides a mock function with given fields:
func (_m *FacilityHandler) UpdateFacility() echo.HandlerFunc {
	ret := _m.Called()

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func() echo.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

type NewFacilityHandlerT interface {
	mock.TestingT
	Cleanup(func())
}

// NewFacilityHandler creates a new instance of FacilityHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFacilityHandler(t NewFacilityHandlerT) *FacilityHandler {
	mock := &FacilityHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
