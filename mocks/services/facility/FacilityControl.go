// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "kost/entities"

	mock "github.com/stretchr/testify/mock"
)

// FacilityControl is an autogenerated mock type for the FacilityControl type
type FacilityControl struct {
	mock.Mock
}

// CreateFacility provides a mock function with given fields: Insert
func (_m *FacilityControl) CreateFacility(Insert entities.AddNewFacility) (entities.RespondFacility, error) {
	ret := _m.Called(Insert)

	var r0 entities.RespondFacility
	if rf, ok := ret.Get(0).(func(entities.AddNewFacility) entities.RespondFacility); ok {
		r0 = rf(Insert)
	} else {
		r0 = ret.Get(0).(entities.RespondFacility)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.AddNewFacility) error); ok {
		r1 = rf(Insert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFacility provides a mock function with given fields: id
func (_m *FacilityControl) DeleteFacility(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllFacility provides a mock function with given fields: HouseID
func (_m *FacilityControl) GetAllFacility(HouseID uint) ([]entities.RespondFacility, error) {
	ret := _m.Called(HouseID)

	var r0 []entities.RespondFacility
	if rf, ok := ret.Get(0).(func(uint) []entities.RespondFacility); ok {
		r0 = rf(HouseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.RespondFacility)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(HouseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFacilityID provides a mock function with given fields: id
func (_m *FacilityControl) GetFacilityID(id uint) (entities.RespondFacility, error) {
	ret := _m.Called(id)

	var r0 entities.RespondFacility
	if rf, ok := ret.Get(0).(func(uint) entities.RespondFacility); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.RespondFacility)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNearFacility provides a mock function with given fields: HouseID
func (_m *FacilityControl) GetNearFacility(HouseID uint) ([]entities.NearFacility, error) {
	ret := _m.Called(HouseID)

	var r0 []entities.NearFacility
	if rf, ok := ret.Get(0).(func(uint) []entities.NearFacility); ok {
		r0 = rf(HouseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.NearFacility)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(HouseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFacility provides a mock function with given fields: id, update
func (_m *FacilityControl) UpdateFacility(id uint, update entities.UpdateFacility) (entities.RespondFacility, error) {
	ret := _m.Called(id, update)

	var r0 entities.RespondFacility
	if rf, ok := ret.Get(0).(func(uint, entities.UpdateFacility) entities.RespondFacility); ok {
		r0 = rf(id, update)
	} else {
		r0 = ret.Get(0).(entities.RespondFacility)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, entities.UpdateFacility) error); ok {
		r1 = rf(id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewFacilityControlT interface {
	mock.TestingT
	Cleanup(func())
}

// NewFacilityControl creates a new instance of FacilityControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFacilityControl(t NewFacilityControlT) *FacilityControl {
	mock := &FacilityControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
