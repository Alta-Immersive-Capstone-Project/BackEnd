// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "kost/entities"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// ImageService is an autogenerated mock type for the ImageService type
type ImageService struct {
	mock.Mock
}

// DeleteImage provides a mock function with given fields: id
func (_m *ImageService) DeleteImage(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteImagebyID provides a mock function with given fields: id_room
func (_m *ImageService) DeleteImagebyID(id_room []int) error {
	ret := _m.Called(id_room)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int) error); ok {
		r0 = rf(id_room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetImage provides a mock function with given fields: id_room
func (_m *ImageService) GetImage(id_room uint) ([]entities.Images, error) {
	ret := _m.Called(id_room)

	var r0 []entities.Images
	if rf, ok := ret.Get(0).(func(uint) []entities.Images); ok {
		r0 = rf(id_room)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Images)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id_room)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertImage provides a mock function with given fields: files, id
func (_m *ImageService) InsertImage(files []*multipart.FileHeader, id uint) error {
	ret := _m.Called(files, id)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*multipart.FileHeader, uint) error); ok {
		r0 = rf(files, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewImageServiceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewImageService creates a new instance of ImageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImageService(t NewImageServiceT) *ImageService {
	mock := &ImageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
