// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "kost/entities"

	mock "github.com/stretchr/testify/mock"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: internalRequest, url
func (_m *UserServiceInterface) CreateUser(internalRequest entities.CreateUserRequest, url string) (entities.InternalAuthResponse, error) {
	ret := _m.Called(internalRequest, url)

	var r0 entities.InternalAuthResponse
	if rf, ok := ret.Get(0).(func(entities.CreateUserRequest, string) entities.InternalAuthResponse); ok {
		r0 = rf(internalRequest, url)
	} else {
		r0 = ret.Get(0).(entities.InternalAuthResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.CreateUserRequest, string) error); ok {
		r1 = rf(internalRequest, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomer provides a mock function with given fields: id
func (_m *UserServiceInterface) DeleteCustomer(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInternal provides a mock function with given fields: id
func (_m *UserServiceInterface) DeleteInternal(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMember provides a mock function with given fields:
func (_m *UserServiceInterface) GetAllMember() ([]entities.GetAll, error) {
	ret := _m.Called()

	var r0 []entities.GetAll
	if rf, ok := ret.Get(0).(func() []entities.GetAll); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.GetAll)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetbyID provides a mock function with given fields: id
func (_m *UserServiceInterface) GetbyID(id uint) (entities.CustomerResponse, error) {
	ret := _m.Called(id)

	var r0 entities.CustomerResponse
	if rf, ok := ret.Get(0).(func(uint) entities.CustomerResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.CustomerResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomer provides a mock function with given fields: customerRequest, id, url
func (_m *UserServiceInterface) UpdateCustomer(customerRequest entities.UpdateCustomerRequest, id uint, url string) (entities.CustomerResponse, error) {
	ret := _m.Called(customerRequest, id, url)

	var r0 entities.CustomerResponse
	if rf, ok := ret.Get(0).(func(entities.UpdateCustomerRequest, uint, string) entities.CustomerResponse); ok {
		r0 = rf(customerRequest, id, url)
	} else {
		r0 = ret.Get(0).(entities.CustomerResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.UpdateCustomerRequest, uint, string) error); ok {
		r1 = rf(customerRequest, id, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInternal provides a mock function with given fields: customerRequest, id, url
func (_m *UserServiceInterface) UpdateInternal(customerRequest entities.UpdateInternalRequest, id uint, url string) (entities.InternalResponse, error) {
	ret := _m.Called(customerRequest, id, url)

	var r0 entities.InternalResponse
	if rf, ok := ret.Get(0).(func(entities.UpdateInternalRequest, uint, string) entities.InternalResponse); ok {
		r0 = rf(customerRequest, id, url)
	} else {
		r0 = ret.Get(0).(entities.InternalResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.UpdateInternalRequest, uint, string) error); ok {
		r1 = rf(customerRequest, id, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewUserServiceInterfaceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServiceInterface(t NewUserServiceInterfaceT) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
