// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "kost/entities"
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	storage "kost/services/storage"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: internalRequest, files, storageProvider
func (_m *UserServiceInterface) CreateUser(internalRequest entities.CreateUserRequest, files map[string]*multipart.FileHeader, storageProvider storage.StorageInterface) (entities.InternalAuthResponse, error) {
	ret := _m.Called(internalRequest, files, storageProvider)

	var r0 entities.InternalAuthResponse
	if rf, ok := ret.Get(0).(func(entities.CreateUserRequest, map[string]*multipart.FileHeader, storage.StorageInterface) entities.InternalAuthResponse); ok {
		r0 = rf(internalRequest, files, storageProvider)
	} else {
		r0 = ret.Get(0).(entities.InternalAuthResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.CreateUserRequest, map[string]*multipart.FileHeader, storage.StorageInterface) error); ok {
		r1 = rf(internalRequest, files, storageProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomer provides a mock function with given fields: id, _a1
func (_m *UserServiceInterface) DeleteCustomer(id int, _a1 storage.StorageInterface) error {
	ret := _m.Called(id, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, storage.StorageInterface) error); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInternal provides a mock function with given fields: id, _a1
func (_m *UserServiceInterface) DeleteInternal(id int, _a1 storage.StorageInterface) error {
	ret := _m.Called(id, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, storage.StorageInterface) error); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomer provides a mock function with given fields: id
func (_m *UserServiceInterface) GetCustomer(id int) (entities.CustomerResponse, error) {
	ret := _m.Called(id)

	var r0 entities.CustomerResponse
	if rf, ok := ret.Get(0).(func(int) entities.CustomerResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.CustomerResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInternal provides a mock function with given fields: id
func (_m *UserServiceInterface) GetInternal(id int) (entities.InternalResponse, error) {
	ret := _m.Called(id)

	var r0 entities.InternalResponse
	if rf, ok := ret.Get(0).(func(int) entities.InternalResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.InternalResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInternal provides a mock function with given fields: customerRequest, id, files, storageProvider
func (_m *UserServiceInterface) UpdateInternal(customerRequest entities.UpdateInternalRequest, id int, files map[string]*multipart.FileHeader, storageProvider storage.StorageInterface) (entities.InternalResponse, error) {
	ret := _m.Called(customerRequest, id, files, storageProvider)

	var r0 entities.InternalResponse
	if rf, ok := ret.Get(0).(func(entities.UpdateInternalRequest, int, map[string]*multipart.FileHeader, storage.StorageInterface) entities.InternalResponse); ok {
		r0 = rf(customerRequest, id, files, storageProvider)
	} else {
		r0 = ret.Get(0).(entities.InternalResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.UpdateInternalRequest, int, map[string]*multipart.FileHeader, storage.StorageInterface) error); ok {
		r1 = rf(customerRequest, id, files, storageProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewUserServiceInterfaceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServiceInterface(t NewUserServiceInterfaceT) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
