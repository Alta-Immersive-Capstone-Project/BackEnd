// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "kost/entities"

	calendar "google.golang.org/api/calendar/v3"

	mock "github.com/stretchr/testify/mock"
)

// CalendarControl is an autogenerated mock type for the CalendarControl type
type CalendarControl struct {
	mock.Mock
}

// CreateReminder provides a mock function with given fields: code, data
func (_m *CalendarControl) CreateReminder(code string, data entities.DataReminder) (calendar.Event, error) {
	ret := _m.Called(code, data)

	var r0 calendar.Event
	if rf, ok := ret.Get(0).(func(string, entities.DataReminder) calendar.Event); ok {
		r0 = rf(code, data)
	} else {
		r0 = ret.Get(0).(calendar.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, entities.DataReminder) error); ok {
		r1 = rf(code, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: state
func (_m *CalendarControl) Login(state string) string {
	ret := _m.Called(state)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(state)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type NewCalendarControlT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCalendarControl creates a new instance of CalendarControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCalendarControl(t NewCalendarControlT) *CalendarControl {
	mock := &CalendarControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
