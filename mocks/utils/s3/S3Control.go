// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// S3Control is an autogenerated mock type for the S3Control type
type S3Control struct {
	mock.Mock
}

// DeleteFromS3 provides a mock function with given fields: filename
func (_m *S3Control) DeleteFromS3(filename string) error {
	ret := _m.Called(filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadFileToS3 provides a mock function with given fields: filename, file
func (_m *S3Control) UploadFileToS3(filename string, file multipart.FileHeader) (string, error) {
	ret := _m.Called(filename, file)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, multipart.FileHeader) string); ok {
		r0 = rf(filename, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, multipart.FileHeader) error); ok {
		r1 = rf(filename, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadInvoiceToS3 provides a mock function with given fields: filename, url
func (_m *S3Control) UploadInvoiceToS3(filename string, url string) (string, error) {
	ret := _m.Called(filename, url)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(filename, url)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(filename, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewS3ControlT interface {
	mock.TestingT
	Cleanup(func())
}

// NewS3Control creates a new instance of S3Control. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewS3Control(t NewS3ControlT) *S3Control {
	mock := &S3Control{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
