// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "kost/entities"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: id
func (_m *UserRepositoryInterface) DeleteUser(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByUser provides a mock function with given fields: field, value
func (_m *UserRepositoryInterface) FindByUser(field string, value string) (entities.User, error) {
	ret := _m.Called(field, value)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(string, string) entities.User); ok {
		r0 = rf(field, value)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(field, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserID provides a mock function with given fields: id
func (_m *UserRepositoryInterface) GetUserID(id int) (entities.User, error) {
	ret := _m.Called(id)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(int) entities.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: newUser
func (_m *UserRepositoryInterface) InsertUser(newUser entities.User) (entities.User, error) {
	ret := _m.Called(newUser)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(entities.User) entities.User); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: id, _a1
func (_m *UserRepositoryInterface) UpdateUser(id int, _a1 entities.User) (entities.User, error) {
	ret := _m.Called(id, _a1)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(int, entities.User) entities.User); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entities.User) error); ok {
		r1 = rf(id, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewUserRepositoryInterfaceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepositoryInterface(t NewUserRepositoryInterfaceT) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
