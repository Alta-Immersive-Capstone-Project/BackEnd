// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "kost/entities"

	mock "github.com/stretchr/testify/mock"
)

// CityRepo is an autogenerated mock type for the CityRepo type
type CityRepo struct {
	mock.Mock
}

// CreateCity provides a mock function with given fields: new
func (_m *CityRepo) CreateCity(new entities.City) (entities.City, error) {
	ret := _m.Called(new)

	var r0 entities.City
	if rf, ok := ret.Get(0).(func(entities.City) entities.City); ok {
		r0 = rf(new)
	} else {
		r0 = ret.Get(0).(entities.City)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.City) error); ok {
		r1 = rf(new)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCity provides a mock function with given fields: cityID
func (_m *CityRepo) DeleteCity(cityID uint) error {
	ret := _m.Called(cityID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(cityID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCity provides a mock function with given fields:
func (_m *CityRepo) GetAllCity() ([]entities.City, error) {
	ret := _m.Called()

	var r0 []entities.City
	if rf, ok := ret.Get(0).(func() []entities.City); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.City)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCityDistricts provides a mock function with given fields: cityID
func (_m *CityRepo) GetAllCityDistricts(cityID uint) ([]entities.City, error) {
	ret := _m.Called(cityID)

	var r0 []entities.City
	if rf, ok := ret.Get(0).(func(uint) []entities.City); ok {
		r0 = rf(cityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.City)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(cityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCity provides a mock function with given fields: cityID
func (_m *CityRepo) GetCity(cityID uint) (entities.City, error) {
	ret := _m.Called(cityID)

	var r0 entities.City
	if rf, ok := ret.Get(0).(func(uint) entities.City); ok {
		r0 = rf(cityID)
	} else {
		r0 = ret.Get(0).(entities.City)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(cityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCity provides a mock function with given fields: id, new
func (_m *CityRepo) UpdateCity(id uint, new entities.City) (entities.City, error) {
	ret := _m.Called(id, new)

	var r0 entities.City
	if rf, ok := ret.Get(0).(func(uint, entities.City) entities.City); ok {
		r0 = rf(id, new)
	} else {
		r0 = ret.Get(0).(entities.City)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, entities.City) error); ok {
		r1 = rf(id, new)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewCityRepoT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCityRepo creates a new instance of CityRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCityRepo(t NewCityRepoT) *CityRepo {
	mock := &CityRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
