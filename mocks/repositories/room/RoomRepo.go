// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "kost/entities"

	mock "github.com/stretchr/testify/mock"
)

// RoomRepo is an autogenerated mock type for the RoomRepo type
type RoomRepo struct {
	mock.Mock
}

// CreateRoom provides a mock function with given fields: new
func (_m *RoomRepo) CreateRoom(new entities.Room) (entities.Room, error) {
	ret := _m.Called(new)

	var r0 entities.Room
	if rf, ok := ret.Get(0).(func(entities.Room) entities.Room); ok {
		r0 = rf(new)
	} else {
		r0 = ret.Get(0).(entities.Room)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.Room) error); ok {
		r1 = rf(new)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoom provides a mock function with given fields: id
func (_m *RoomRepo) DeleteRoom(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllRoom provides a mock function with given fields:
func (_m *RoomRepo) GetAllRoom() ([]entities.Room, error) {
	ret := _m.Called()

	var r0 []entities.Room
	if rf, ok := ret.Get(0).(func() []entities.Room); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Room)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomID provides a mock function with given fields: id
func (_m *RoomRepo) GetRoomID(id uint) (entities.Room, error) {
	ret := _m.Called(id)

	var r0 entities.Room
	if rf, ok := ret.Get(0).(func(uint) entities.Room); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Room)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoom provides a mock function with given fields: id, new
func (_m *RoomRepo) UpdateRoom(id uint, new entities.UpdateRoom) (entities.Room, error) {
	ret := _m.Called(id, new)

	var r0 entities.Room
	if rf, ok := ret.Get(0).(func(uint, entities.UpdateRoom) entities.Room); ok {
		r0 = rf(id, new)
	} else {
		r0 = ret.Get(0).(entities.Room)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, entities.UpdateRoom) error); ok {
		r1 = rf(id, new)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewRoomRepoT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoomRepo creates a new instance of RoomRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoomRepo(t NewRoomRepoT) *RoomRepo {
	mock := &RoomRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
