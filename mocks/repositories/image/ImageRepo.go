// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "kost/entities"

	mock "github.com/stretchr/testify/mock"
)

// ImageRepo is an autogenerated mock type for the ImageRepo type
type ImageRepo struct {
	mock.Mock
}

// CreateImage provides a mock function with given fields: new
func (_m *ImageRepo) CreateImage(new entities.Image) error {
	ret := _m.Called(new)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Image) error); ok {
		r0 = rf(new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

<<<<<<< HEAD
// DeleteImage provides a mock function with given fields: roomID, userID
func (_m *ImageRepo) DeleteImage(roomID uint, userID uint) error {
	ret := _m.Called(roomID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(roomID, userID)
=======
// DeleteImage provides a mock function with given fields: imageID
func (_m *ImageRepo) DeleteImage(imageID uint) error {
	ret := _m.Called(imageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(imageID)
>>>>>>> 3d2f172cae4224571053c1b5658836fe1402c6a9
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

<<<<<<< HEAD
=======
// GetAllImage provides a mock function with given fields: roomID
func (_m *ImageRepo) GetAllImage(roomID uint) ([]entities.Image, error) {
	ret := _m.Called(roomID)

	var r0 []entities.Image
	if rf, ok := ret.Get(0).(func(uint) []entities.Image); ok {
		r0 = rf(roomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: ID
func (_m *ImageRepo) GetImage(ID uint) (entities.Image, error) {
	ret := _m.Called(ID)

	var r0 entities.Image
	if rf, ok := ret.Get(0).(func(uint) entities.Image); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(entities.Image)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

>>>>>>> 3d2f172cae4224571053c1b5658836fe1402c6a9
type NewImageRepoT interface {
	mock.TestingT
	Cleanup(func())
}

// NewImageRepo creates a new instance of ImageRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImageRepo(t NewImageRepoT) *ImageRepo {
	mock := &ImageRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
