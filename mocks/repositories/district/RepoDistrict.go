// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "kost/entities"

	mock "github.com/stretchr/testify/mock"
)

// RepoDistrict is an autogenerated mock type for the RepoDistrict type
type RepoDistrict struct {
	mock.Mock
}

// CreateDistrict provides a mock function with given fields: _a0
func (_m *RepoDistrict) CreateDistrict(_a0 entities.District) (entities.District, error) {
	ret := _m.Called(_a0)

	var r0 entities.District
	if rf, ok := ret.Get(0).(func(entities.District) entities.District); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.District)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.District) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDistrict provides a mock function with given fields: id
func (_m *RepoDistrict) DeleteDistrict(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllDistrict provides a mock function with given fields: cid
func (_m *RepoDistrict) GetAllDistrict(cid uint) ([]entities.District, error) {
	ret := _m.Called(cid)

	var r0 []entities.District
	if rf, ok := ret.Get(0).(func(uint) []entities.District); ok {
		r0 = rf(cid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.District)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(cid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistrictID provides a mock function with given fields: id
func (_m *RepoDistrict) GetDistrictID(id uint) (entities.District, error) {
	ret := _m.Called(id)

	var r0 entities.District
	if rf, ok := ret.Get(0).(func(uint) entities.District); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.District)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

<<<<<<< HEAD
=======
// SelectAllDistrict provides a mock function with given fields:
func (_m *RepoDistrict) SelectAllDistrict() ([]entities.District, error) {
	ret := _m.Called()

	var r0 []entities.District
	if rf, ok := ret.Get(0).(func() []entities.District); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.District)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

>>>>>>> 3d2f172cae4224571053c1b5658836fe1402c6a9
// UpdateDistrict provides a mock function with given fields: id, update
func (_m *RepoDistrict) UpdateDistrict(id uint, update entities.District) (entities.District, error) {
	ret := _m.Called(id, update)

	var r0 entities.District
	if rf, ok := ret.Get(0).(func(uint, entities.District) entities.District); ok {
		r0 = rf(id, update)
	} else {
		r0 = ret.Get(0).(entities.District)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, entities.District) error); ok {
		r1 = rf(id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewRepoDistrictT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoDistrict creates a new instance of RepoDistrict. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoDistrict(t NewRepoDistrictT) *RepoDistrict {
	mock := &RepoDistrict{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
