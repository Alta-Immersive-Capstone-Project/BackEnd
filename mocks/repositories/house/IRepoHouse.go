// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entities "kost/entities"

	mock "github.com/stretchr/testify/mock"
)

// IRepoHouse is an autogenerated mock type for the IRepoHouse type
type IRepoHouse struct {
	mock.Mock
}

// CreateHouse provides a mock function with given fields: addNew
func (_m *IRepoHouse) CreateHouse(addNew entities.House) (entities.House, error) {
	ret := _m.Called(addNew)

	var r0 entities.House
	if rf, ok := ret.Get(0).(func(entities.House) entities.House); ok {
		r0 = rf(addNew)
	} else {
		r0 = ret.Get(0).(entities.House)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.House) error); ok {
		r1 = rf(addNew)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHouse provides a mock function with given fields: id
func (_m *IRepoHouse) DeleteHouse(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindHouseByTitle provides a mock function with given fields: name
func (_m *IRepoHouse) FindHouseByTitle(name string) ([]entities.HouseResponseGet, error) {
	ret := _m.Called(name)

	var r0 []entities.HouseResponseGet
	if rf, ok := ret.Get(0).(func(string) []entities.HouseResponseGet); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.HouseResponseGet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllHouseByCities provides a mock function with given fields: cid
func (_m *IRepoHouse) GetAllHouseByCities(cid uint) ([]entities.HouseResponseGet, error) {
	ret := _m.Called(cid)

	var r0 []entities.HouseResponseGet
	if rf, ok := ret.Get(0).(func(uint) []entities.HouseResponseGet); ok {
		r0 = rf(cid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.HouseResponseGet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(cid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllHouseByDist provides a mock function with given fields: dist_id
func (_m *IRepoHouse) GetAllHouseByDist(dist_id uint) ([]entities.HouseResponseGet, error) {
	ret := _m.Called(dist_id)

	var r0 []entities.HouseResponseGet
	if rf, ok := ret.Get(0).(func(uint) []entities.HouseResponseGet); ok {
		r0 = rf(dist_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.HouseResponseGet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(dist_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllHouseByDistrict provides a mock function with given fields: dist_id
func (_m *IRepoHouse) GetAllHouseByDistrict(dist_id uint) ([]entities.HouseResponseGet, error) {
	ret := _m.Called(dist_id)

	var r0 []entities.HouseResponseGet
	if rf, ok := ret.Get(0).(func(uint) []entities.HouseResponseGet); ok {
		r0 = rf(dist_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.HouseResponseGet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(dist_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllHouseByDstAndCty provides a mock function with given fields: cid, dist_id
func (_m *IRepoHouse) GetAllHouseByDstAndCty(cid uint, dist_id uint) ([]entities.HouseResponseGet, error) {
	ret := _m.Called(cid, dist_id)

	var r0 []entities.HouseResponseGet
	if rf, ok := ret.Get(0).(func(uint, uint) []entities.HouseResponseGet); ok {
		r0 = rf(cid, dist_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.HouseResponseGet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(cid, dist_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHouseID provides a mock function with given fields: id
func (_m *IRepoHouse) GetHouseID(id uint) (entities.HouseResponseGetByID, error) {
	ret := _m.Called(id)

	var r0 entities.HouseResponseGetByID
	if rf, ok := ret.Get(0).(func(uint) entities.HouseResponseGetByID); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.HouseResponseGetByID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllHouse provides a mock function with given fields:
func (_m *IRepoHouse) SelectAllHouse() ([]entities.HouseResponseGet, error) {
	ret := _m.Called()

	var r0 []entities.HouseResponseGet
	if rf, ok := ret.Get(0).(func() []entities.HouseResponseGet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.HouseResponseGet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHouse provides a mock function with given fields: id, update
func (_m *IRepoHouse) UpdateHouse(id uint, update entities.House) (entities.House, error) {
	ret := _m.Called(id, update)

	var r0 entities.House
	if rf, ok := ret.Get(0).(func(uint, entities.House) entities.House); ok {
		r0 = rf(id, update)
	} else {
		r0 = ret.Get(0).(entities.House)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, entities.House) error); ok {
		r1 = rf(id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewIRepoHouseT interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepoHouse creates a new instance of IRepoHouse. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepoHouse(t NewIRepoHouseT) *IRepoHouse {
	mock := &IRepoHouse{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
